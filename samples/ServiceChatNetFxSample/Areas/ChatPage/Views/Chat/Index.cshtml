@{
    ViewBag.Title = "ASP.NET Chat Page";
}

<link type="text/css" href="~/Areas/ChatPage/ChatPage.css" rel="stylesheet" />
<header class="help-page">
    <div class="content-wrapper">
        <div class="float-left">
            <h1 style="text-align: center">@ViewBag.Title</h1>
        </div>
    </div>
</header>
<div class="container">
    <ul id="messages" style="background-color: whitesmoke"></ul>
    <div style="margin: 10px auto; width: 100%; max-width: 350px;">
        <input style="width: calc(100% - 120px); font-size: 18px;" type="text" id="message" />
        <input style="font-size: 15px;" type="button" id="sendmessage" value="Send" />
        <input style="font-size: 15px;" type="button" id="echo" value="Echo" />
    </div>
</div>
<!--Script references. -->
<!--Reference the SignalR library. -->
<script>
        if (typeof Promise === 'undefined') {
            document.write('<script type="text/javascript" src="Scripts/signalr-clientES5.js"><\/script>');
        }
        else {
            document.write('<script type="text/javascript" src="Scripts/signalr-client.js"><\/script>');
        }
</script>
<!--Add script to update the page and send messages.-->
<script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {

            var messageInput = document.getElementById('message');

            // Get the user name and store it to prepend to messages.
            var name = prompt('Enter your name:', '');
            // Set initial focus to message input box.
            messageInput.focus();

            var accessToken = '';

            function getAccessToken(url) {
                return new Promise((resolve, reject) => {
                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', url, true);
                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                    xhr.send();
                    xhr.onload = () => {
                        if (xhr.status >= 200 && xhr.status < 300) {
                            resolve(xhr.response || xhr.responseText);
                        }
                        else {
                            reject(new Error(xhr.statusText));
                        }
                    };

                    xhr.onerror = () => {
                        reject(new Error(xhr.statusText));
                    }
                });
            }

            getAccessToken('/signalr-auth/chat?uid=' + name)
                .then(function(token) {
                    accessToken = token;
                    return startConnection('http://localhost:5001/client/?hub=chat',
                        function(connection) {
                            var messageCallback = function(name, message) {
                                // Html encode display name and message.
                                var encodedName = name;
                                var encodedMsg = message;
                                // Add the message to the page.
                                var liElement = document.createElement('li');
                                liElement.innerHTML = '<strong>' + encodedName + '</strong>:&nbsp;&nbsp;' + encodedMsg;
                                var messageBox = document.getElementById('messages');
                                messageBox.appendChild(liElement);
                                messageBox.scrollTop = messageBox.scrollHeight;
                            };
                            // Create a function that the hub can call to broadcast messages.
                            connection.on('broadcastMessage', messageCallback);
                            connection.on('echo', messageCallback);
                        });
                })
                .then(function (connection) {
                    console.log('connection started');
                    connection.invoke('broadcastMessage', '[SYSTEM]', '----- ' + name + ' joined -----');
                    document.getElementById('sendmessage').addEventListener('click', function (event) {
                        // Call the broadcastMessage method on the hub.
                        connection.invoke('broadcastMessage', name, messageInput.value);

                        // Clear text box and reset focus for next comment.
                        messageInput.value = '';
                        messageInput.focus();
                        event.preventDefault();
                    });
                    document.getElementById('message').addEventListener('keypress', function (args) {
                        if (args.keyCode === 13) {
                            document.getElementById('sendmessage').click();
                            return false;
                        }
                    });
                    document.getElementById('echo').addEventListener('click', function (event) {
                        // Call the echo method on the hub.
                        connection.invoke('echo', name, messageInput.value);

                        // Clear text box and reset focus for next comment.
                        messageInput.value = '';
                        messageInput.focus();
                        event.preventDefault();
                    });
                })
                .catch(error => {
                    console.error(error.message);
                });

            // Starts a connection with transport fallback - if the connection cannot be started using
            // the webSockets transport the function will fallback to the serverSentEvents transport and
            // if this does not work it will try longPolling. If the connection cannot be started using
            // any of the available transports the function will return a rejected Promise.
            function startConnection(url, configureConnection) {
                return function start(transport) {
                    console.log(`Starting connection using ${signalR.TransportType[transport]} transport`);
                    var connection = new signalR.HubConnection(url, { transport: transport, uid: name, accessToken: () => accessToken });
                    if (configureConnection && typeof configureConnection === 'function') {
                        configureConnection(connection);
                    }

                    return connection.start()
                        .then(function() {
                            return connection;
                        })
                        .catch(function(error) {
                            console.log(`Cannot start the connection use ${signalR.TransportType[transport]} transport. ${error.message}`);
                            if (transport !== signalR.TransportType.LongPolling) {
                                return start(transport + 1);
                            }

                            return Promise.reject(error);
                        });
                }(signalR.TransportType.WebSockets);
            }
        });
</script>
